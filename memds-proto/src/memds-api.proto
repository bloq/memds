
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.bloq.memds";
option java_outer_classname = "MemdsProto";
option objc_class_prefix = "MDS";

package memds;

service Memds {
  rpc Exec (RequestMsg) returns (ResponseMsg) {}
}

enum AtomType {
    NOTYPE = 0;
    STRING = 1;
    LIST = 2;
    SET = 3;
}

message StrGetOp {
  bytes key = 1;	// key of item to retrieve
  bool want_length = 2;	// (true) return value length, (false) return value
  bool substr = 3;	// (true) return substring, (false) return whole value
  sint32 range_start = 4;
  sint32 range_end = 5;
}

message StrGetRes {
  bytes value = 1;		// if !want_length, value requested
  uint64 value_length = 2;	// if want_length, filled with value length
}

message StrSetOp {
  bytes key = 1;	// key of item to store
  bytes value = 2;	// value of item to store
  bool return_old = 3;	// if true & old item present, return old-value stored at key
  bool create_excl = 4;	// if true, store iff string does NOT exist
}

message StrSetRes {
  bytes old_value = 1;	// if return_old, old-value stored at key
}

message NumOp {
  bytes key = 1;	// key of item to increment
  sint64 n = 2;		// (optional) amount of increment
}

message NumRes {
  sint64 old_value = 1;	// value of key prior to operation
}

message KeyOp {
  bytes key = 1;	// key upon which to query/update
}

message KeyRenameOp {
  bytes old_key = 1;
  bytes new_key = 2;
  bool create_excl = 3;	// if true, store iff new_key does NOT exist
}

message KeyListOp {
  repeated bytes keys = 1;
}

message ListPushOp {
  bytes key = 1;	// key of list
  bool at_head = 2;	// (true) push head, (false) push tail
  bool if_exists = 3;	// if true, push iff list exists
  repeated bytes elements = 4; // items to push onto list
}

message ListPopOp {
  bytes key = 1;	// key of list
  bool at_head = 2;	// (true) pop head, (false) pop tail
}

message ListIndexOp {
  bytes key = 1;	// key of list
  sint32 index = 2;	// index of item to return
}

message ListRes {
  repeated bytes elements = 1; // list of elements returned
}

message KeyedListOp {
  bytes key = 1;		// key of set
  repeated bytes elements = 4;	// items to query or update within key
}

message SetMoveOp {
  bytes src_key = 1;
  bytes dest_key = 2;
  bytes member = 3;
}

message SetInfoRes {
  uint32 length = 1;
}

message CmpStoreOp {
  repeated bytes keys = 1;	// keys upon which to operate
  bytes store_key = 2;		// if empty, return results.
  				// if non-empty, store results in this key.
}

message CountRes {
  uint64 n = 1;		// many operations return a count, or length
}

message ListInfoRes {
  uint32 length = 1;
}

message TimeRes {
  uint64 secs = 1;
  uint32 nanosecs = 2;
}

message TypeRes {
  AtomType typ = 1;
}

enum OpType {
  NOOP = 0;

  KEYS_DEL = 10;
  KEYS_EXIST = 11;
  KEYS_RENAME = 13;
  KEYS_TYPE = 12;
  KEY_DUMP = 14;
  KEY_RESTORE = 15;

  LIST_PUSH = 20;
  LIST_POP = 21;
  LIST_INDEX = 22;
  LIST_INFO = 23;

  SET_ADD = 50;
  SET_INFO = 51;
  SET_DEL = 52;
  SET_DIFF = 55;
  SET_MEMBERS = 53;
  SET_INTERSECT = 57;
  SET_ISMEMBER = 54;
  SET_UNION = 56;
  SET_MOVE = 58;

  SRV_BGSAVE = 44;
  SRV_DBSIZE = 41;
  SRV_FLUSHDB = 42;
  SRV_FLUSHALL = 43;
  SRV_TIME = 40;

  STR_GET = 31;
  STR_GETRANGE = 32;
  STR_SET = 38;
  STR_DECR = 33;
  STR_DECRBY = 34;
  STR_INCR = 35;
  STR_INCRBY = 36;
  STR_APPEND = 37;
}

message Operation {
  OpType otype = 1;

  StrGetOp get = 10;
  StrSetOp set = 11;
  NumOp num = 12;
  ListPushOp lpush = 13;
  ListPopOp lpop = 14;
  ListIndexOp lindex = 15;
  KeyOp key = 16;
  KeyListOp key_list = 17;
  KeyRenameOp rename = 18;
  KeyedListOp keyed_list = 19;
  CmpStoreOp cmp_stor = 20;
  SetMoveOp set_move = 21;
}

message RequestMsg {
  repeated Operation ops = 1;
}

message OpResult {
  bool ok = 1;		// success?
  int32 err_code = 2;	// error code, if !ok
  string err_message = 3;	// error message, if !ok

  OpType otype = 4;

  StrGetRes get = 10;
  StrSetRes set = 11;
  NumRes num = 12;
  ListRes list = 13;
  CountRes count = 14;
  ListInfoRes list_info = 15;
  SetInfoRes set_info = 18;
  TypeRes typ = 16;
  TimeRes srv_time = 17;
}

message ResponseMsg {
  bool ok = 1;		// success?
  int32 err_code = 2;	// error code, if !ok
  string err_message = 3;	// error message, if !ok

  repeated OpResult results = 4;
}

message DbValue {
  AtomType typ = 1;
  bytes key = 2;

  bytes str = 3;
  repeated bytes elements = 4;
}

message MemdsMessage {
  enum MsgType {
    NULLMSG = 0;
    DBVAL = 1;
    END = 2;
  }

  MsgType mtype = 1;
  DbValue dbv = 2;
}

